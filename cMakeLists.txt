cmake_minimum_required(VERSION 3.0)

project(dynTau)



####  Find Torch and Eigen Libraries  ####
if(NOT DEFINED ENV{LIBS})
    message(FATAL_ERROR "Error: The LIBS environment variable is not set. Please set the LIBS environment variable to the path of the directory containing the required libraries.")
endif()

set(CMAKE_PREFIX_PATH $ENV{LIBS}\\libtorch)
list(APPEND CMAKE_PREFIX_PATH $ENV{LIBS}\\eigen-3.3.9)
message(STATUS "Prefix path set to ${CMAKE_PREFIX_PATH}")

find_package(Torch REQUIRED)
find_package(Eigen3 3.3 REQUIRED NO_MODULE)



####   Find Python Packages   ####
find_package(Python3 3.7 EXACT COMPONENTS Interpreter NumPy Development REQUIRED)
message(STATUS "Found Python version: ${Python3_VERSION}")
message(STATUS "Interpreter Path: ${Python3_EXECUTABLE}")



####   Set Compiler Settings   ####
# if(CMAKE_BUILD_TYPE EQUAL "Debug")
#     set(CMAKE_CXX_FLAGS "/MDd")
# else()
#     set(CMAKE_CXX_FLAGS "/MD")
# endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_RL_FLAGS} ${TORCH_CXX_FLAGS} /O2")
message(STATUS "Compiler flags set to: ${CMAKE_CXX_FLAGS}")



####   Find Necessary Files   ####
# Add the include directory to the include path
include_directories(include)

# set(MANUAL_HEADERS 
#     src/matplotlibcpp.h
# )



####   Find all Subdirectories   ###
add_subdirectory(src/beamsplitter)
add_subdirectory(src/dynamicTau)



#### DLL Version ####

# # Build the DLL
# add_library(dynTauEnv SHARED ${SOURCES})

# # # Link any necessary libraries
# # target_link_libraries(dynTauEnv my_lib1 my_lib2)

# # Install the DLL
# install(TARGETS dynTauEnv DESTINATION lib)

# # Install the header files
# install(DIRECTORY include/ DESTINATION include)